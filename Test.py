# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u3c2ABBs_DRFmwgMWtup-KuyXcoEJhn1
"""



"""# Test Section"""

import os
import shutil
import json
from PIL import Image
#from catch_ghosts import get_image_hash, find_duplicates, load_database, save_database

def setup_test_photos():

    shutil.copyfile('/content/img_01.jpg', '/content/img_04.jpg')

def test_get_image_hash():
    hash1 = get_image_hash('/content/img_01.jpg')
    hash2 = get_image_hash('/content/img_04.jpg')
    print(f"Hash1: {hash1}, Hash2: {hash2}")
    assert hash1 == hash2, "Hashes should match for duplicate images"

def test_find_duplicates():
    dummy_db = [
        {"order_id": "1001", "photo_id": "001", "hash": "abc123"},
        {"order_id": "1001", "photo_id": "002", "hash": "xyz999"},
        {"order_id": "1002", "photo_id": "001", "hash": "abc123"},
    ]

    new_entry_same_order = {"order_id": "1001", "photo_id": "003", "hash": "abc123"}
    same_order, cross_order = find_duplicates(dummy_db, new_entry_same_order)
    print(cross_order)
    #print(same_order)
    assert len(same_order) == 1, "Expected 1 duplicate in the same order"
    assert same_order[0]['photo_id'] == '001'
    #assert len(cross_order) == 1, "Expected no cross-order duplicate"
    #assert len(cross_order) == 0, f"Expected no cross-order duplicates, but got {len(cross_order)}"
    if len(cross_order) == 0:
        print(" No cross-order duplicates found (as expected)")
    else:
        print(f"Unexpected cross-order duplicates found: {cross_order}")


    new_entry_cross_order = {"order_id": "1003", "photo_id": "004", "hash": "abc123"}
    same_order2, cross_order2 = find_duplicates(dummy_db, new_entry_cross_order)
    print(cross_order2)
    print(same_order2)
    assert len(same_order2) == 0
    assert len(cross_order2) == 2, "Expected 2 cross-order duplicates"

def test_db_read_write():
    dummy_data = [{"order_id": "x", "photo_id": "1", "hash": "zzz"}]
    save_database(dummy_data)
    loaded = load_database()
    assert loaded == dummy_data, "Database read/write mismatch"

if __name__ == "__main__":
    print("Running tests...\n")
    setup_test_photos()
    test_get_image_hash()
    test_find_duplicates()
    test_db_read_write()
    print("\nâœ… All tests passed.")